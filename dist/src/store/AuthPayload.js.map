{"version":3,"sources":["../../../src/store/AuthPayload.js"],"names":["gql","AuthPayload","defaults","authPayload","__typename","token","user","id","username","department","loged","email","photo","file","stream","mimetype","filename","encoding","role","isAdmin","name","description","maxHoldCount","maxDelayDays","maxDelayTimes","maxBorrowDuration","statistics","readCount","interests","recentRead","credit","resolvers","Mutation","updateAuthPayload","_","cache","rest","others","data","writeData","UpdateAuthPayloadMutation","GetAuthPayloadQuery"],"mappings":";;;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;;AAEO,IAAMC,cAAc;AACzBC,YAAU;AACRC,iBAAa;AACXC,kBAAY,aADD;AAEXC,aAAO,EAFI;AAGXC,YAAM;AACJF,oBAAY,MADR;AAEJG,YAAI,EAFA;AAGJC,kBAAU,EAHN;AAIJC,oBAAY,EAJR;AAKJC,eAAO,KALH;AAMJC,eAAO,EANH;AAOJC,eAAO;AACLR,sBAAY,MADP;AAELS,gBAAM;AACJT,wBAAY,QADR;AAEJU,oBAAQ,EAFJ;AAGJC,sBAAU,EAHN;AAIJC,sBAAU,EAJN;AAKJC,sBAAU;AALN;AAFD,SAPH;AAiBJC,cAAM;AACJd,sBAAY,MADR;AAEJe,mBAAS,KAFL;AAGJC,gBAAM,EAHF;AAIJC,uBAAa,EAJT;AAKJC,wBAAc,CALV;AAMJC,wBAAc,EANV;AAOJC,yBAAe,CAPX;AAQJC,6BAAmB;AARf,SAjBF;AA2BJC,oBAAY;AACVtB,sBAAY,YADF;AAEVkB,wBAAc,CAFJ;AAGVK,qBAAW,CAHD;AAIVC,qBAAW,EAJD;AAKVC,sBAAY,EALF;AAMVC,kBAAQ;AANE;AA3BR;AAHK;AADL,GADe;AA2CzBC,aAAW;AACTC,cAAU;AACRC,yBAAmB,2BAACC,CAAD,eAAmC;AAAA,YAA7B7B,KAA6B,QAA7BA,KAA6B;AAAA,YAAtBC,IAAsB,QAAtBA,IAAsB;AAAA,YAAZ6B,KAAY,SAAZA,KAAY;;AAAA,YAC5CjB,IAD4C,GACPZ,IADO,CAC5CY,IAD4C;AAAA,YACtCQ,UADsC,GACPpB,IADO,CACtCoB,UADsC;AAAA,YAC1Bd,KAD0B,GACPN,IADO,CAC1BM,KAD0B;AAAA,YAChBwB,IADgB,4BACP9B,IADO;;AAAA,YAE5CuB,UAF4C,GAElBH,UAFkB,CAE5CG,UAF4C;AAAA,YAE7BQ,MAF6B,4BAElBX,UAFkB;;AAGpD,YAAMY,OAAO;AACXnC,uBAAa;AACXC,wBAAY,YADD;AAEXC,wBAFW;AAGXC;AACEF,0BAAY;AADd,eAEKgC,IAFL;AAGExB,qBAAO;AACLR,4BAAY,MADP;AAELS;AACET,8BAAY;AADd,mBAEKQ,MAAMC,IAFX;AAFK,eAHT;AAUEK;AACEd,4BAAY;AADd,iBAEKc,IAFL,CAVF;AAcEQ;AACEtB,4BAAY;AADd,iBAEKiC,MAFL;AAGER,yDAAgBA,UAAhB;AAHF;AAdF;AAHW;AADF,SAAb;AA0BAM,cAAMI,SAAN,CAAgB,EAAED,UAAF,EAAhB;AACA,eAAO,IAAP;AACD;AAhCO;AADD;AA3Cc,CAApB;;AAgFP,OAAO,IAAME,4BAA4BxC,GAA5B,iBAAN;AAKP,OAAO,IAAMyC,sBAAsBzC,GAAtB,kBAAN","file":"AuthPayload.js","sourcesContent":["import gql from 'graphql-tag'\n\nexport const AuthPayload = {\n  defaults: {\n    authPayload: {\n      __typename: 'AuthPayload',\n      token: '',\n      user: {\n        __typename: 'User',\n        id: '',\n        username: '',\n        department: '',\n        loged: false,\n        email: '',\n        photo: {\n          __typename: 'File',\n          file: {\n            __typename: 'Upload',\n            stream: '',\n            mimetype: '',\n            filename: '',\n            encoding: ''\n          }\n        },\n        role: {\n          __typename: 'Role',\n          isAdmin: false,\n          name: '',\n          description: '',\n          maxHoldCount: 5,\n          maxDelayDays: 15,\n          maxDelayTimes: 1,\n          maxBorrowDuration: 30\n        },\n        statistics: {\n          __typename: 'Statistics',\n          maxHoldCount: 5,\n          readCount: 0,\n          interests: [],\n          recentRead: [],\n          credit: 0\n        }\n      }\n    }\n  },\n  resolvers: {\n    Mutation: {\n      updateAuthPayload: (_, { token, user }, { cache }) => {\n        const { role, statistics, photo, ...rest } = user\n        const { recentRead, ...others } = statistics\n        const data = {\n          authPayload: {\n            __typename: 'LoggedUser',\n            token,\n            user: {\n              __typename: 'User',\n              ...rest,\n              photo: {\n                __typename: 'File',\n                file: {\n                  __typename: 'Upload',\n                  ...photo.file\n                }\n              },\n              role: {\n                __typename: 'Role',\n                ...role\n              },\n              statistics: {\n                __typename: 'Statistics',\n                ...others,\n                recentRead: [...recentRead]\n              }\n            }\n          }\n        }\n        cache.writeData({ data })\n        return null\n      }\n    }\n  }\n}\nexport const UpdateAuthPayloadMutation = gql`\n  mutation UpdateAuthPayload($token: String, $user: User){\n    updateAuthPayload(token: $token, user: $user) @client\n  }\n`\nexport const GetAuthPayloadQuery = gql`\n  query GetAuthPayload { \n    authPayload @client {\n      token\n      user { \n        id\n        username\n        department\n        loged\n        email\n        role {\n          name\n          description\n          isAdmin\n          maxHoldCount\n          maxDelayDays\n          maxDelayTimes\n          maxBorrowDuration\n        }\n        statistics {\n          maxHoldCount\n          readCount\n          interests\n          recentRead\n          credit\n        }\n      }\n    }\n  }\n`\n"]}