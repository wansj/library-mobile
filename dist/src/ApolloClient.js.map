{"version":3,"sources":["../../src/ApolloClient.js"],"names":["ApolloClient","createUploadLink","ApolloLink","split","setContext","withClientState","InMemoryCache","WebSocketLink","getMainDefinition","merge","GRAPHQL_ENDPOINTS","GRAPHQL_WEBSOCKET_ENDPOINTS","AuthPayload","LoadingStatus","getToken","cache","authLink","request","authorization","headers","stateLink","httpLink","uri","subscriptionMiddleware","applyMiddleware","options","next","authToken","wsLink","reconnect","subscriptionClient","use","link","query","kind","operation","from","connectToDevTools"],"mappings":";;;;;;AAAA,SAASA,YAAT,QAA6B,eAA7B;AACA,SAASC,gBAAT,QAAiC,sBAAjC;AACA,SAASC,UAAT,EAAqBC,KAArB,QAAkC,aAAlC;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,aAAT,QAA8B,gBAA9B;AACA,SAASC,iBAAT,QAAkC,kBAAlC;AACA,OAAOC,KAAP,MAAkB,cAAlB;AACA,SAASC,iBAAT,EAA4BC,2BAA5B,QAA+D,sBAA/D;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,QAAT,QAAyB,SAAzB;;AAEA,IAAMC,QAAQ,IAAIT,aAAJ,EAAd;;AAEA,IAAMU,WAAWZ;AAAA,sEAAW,iBAAOa,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAA8DH,UAA9D;;AAAA;AAAA;AAAA;AAAA;AAA+BI,2BAA/B;AAAA;AAAA;AAAqBC,qBAArB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAX;;AAAA;AAAA;AAAA;AAAA,IAAjB;AACA,IAAMC,YAAYf,6BACbI,MAAMG,WAAN,EAAmBC,aAAnB,CADa;AAEhBE;AAFgB,GAAlB;AAIA,IAAMM,WAAWpB,iBAAiB;AAChCqB,OAAKZ;AAD2B,CAAjB,CAAjB;AAGA;AACA,IAAMa,yBAAyB;AAC7BC;AAAA,yEAAiB,kBAAOC,OAAP,EAAgBC,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACqBZ,UADrB;;AAAA;AAAA;AACfW,sBAAQE,SADO;;AAEfD;;AAFe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAjB;;AAAA;AAAA;AAAA;AAAA;AAD6B,CAA/B;AAMA,IAAME,SAAS,IAAIrB,aAAJ,CAAkB;AAC/Be,OAAKX,2BAD0B;AAE/Bc,WAAS;AACPI,eAAW;AADJ;AAFsB,CAAlB,CAAf;AAMAD,OAAOE,kBAAP,CAA0BC,GAA1B,CAA8B,CAACR,sBAAD,CAA9B;AACA,IAAMS,OAAO7B;AACX;AACA,iBAAe;AAAA,MAAZ8B,KAAY,SAAZA,KAAY;;AAAA,2BACezB,kBAAkByB,KAAlB,CADf;AAAA,MACLC,IADK,sBACLA,IADK;AAAA,MACCC,SADD,sBACCA,SADD;;AAEb,SAAOD,SAAS,qBAAT,IAAkCC,cAAc,cAAvD;AACD,CALU,EAMXP,MANW,EAOX1B,WAAWkC,IAAX,CAAgB,CAAChB,SAAD,EAAYJ,QAAZ,EAAsBK,QAAtB,CAAhB,CAPW,CAAb;AASA,eAAe,IAAIrB,YAAJ,CAAiB;AAC9Be,cAD8B;AAE9BiB,YAF8B;AAG9BK,qBAAmB;AAHW,CAAjB,CAAf","file":"ApolloClient.js","sourcesContent":["import { ApolloClient } from 'apollo-client'\nimport { createUploadLink } from 'apollo-upload-client'\nimport { ApolloLink, split } from 'apollo-link'\nimport { setContext } from 'apollo-link-context'\nimport { withClientState } from 'apollo-link-state'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { WebSocketLink } from 'apollo-link-ws'\nimport { getMainDefinition } from 'apollo-utilities'\nimport merge from 'lodash.merge'\nimport { GRAPHQL_ENDPOINTS, GRAPHQL_WEBSOCKET_ENDPOINTS } from './constants/settings'\nimport { AuthPayload } from './store/AuthPayload'\nimport { LoadingStatus } from './store/LoadingStatus'\nimport { getToken } from './utils'\n\nconst cache = new InMemoryCache()\n\nconst authLink = setContext(async (request) => ({headers: {authorization: `Bearer ${await getToken()}`}}))\nconst stateLink = withClientState({\n  ...merge(AuthPayload, LoadingStatus),\n  cache\n})\nconst httpLink = createUploadLink({\n  uri: GRAPHQL_ENDPOINTS\n})\n// https://github.com/apollographql/apollo-server/issues/1505\nconst subscriptionMiddleware = {\n  applyMiddleware: async (options, next) => {\n    options.authToken = `Bearer ${await getToken()}`\n    next()\n  }\n}\nconst wsLink = new WebSocketLink({\n  uri: GRAPHQL_WEBSOCKET_ENDPOINTS,\n  options: {\n    reconnect: true\n  }\n})\nwsLink.subscriptionClient.use([subscriptionMiddleware])\nconst link = split(\n  // split based on operation type\n  ({ query }) => {\n    const { kind, operation } = getMainDefinition(query)\n    return kind === 'OperationDefinition' && operation === 'subscription'\n  },\n  wsLink,\n  ApolloLink.from([stateLink, authLink, httpLink])\n)\nexport default new ApolloClient({\n  cache,\n  link,\n  connectToDevTools: true\n})\n"]}