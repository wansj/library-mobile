{"version":3,"sources":["../../src/utils.js"],"names":["JSEncrypt","iconv","dateFormat","G_AUTH_TOKEN","GetAuthPayloadQuery","apolloClient","getToken","readQuery","query","authPayload","data","token","localStorage","getItem","e","isLoged","resolve","reject","encryptPassword","password","publicKey","encrypt","setPublicKey","encrypted","transformUploadToURL","upload","content","encode","stream","URL","createObjectURL","Blob","formatDate","date","Date","Error","hour","getHours","str"],"mappings":";;;;;;AAAA,OAAOA,SAAP,MAAsB,WAAtB;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,SAASC,UAAT,QAA2B,KAA3B;AACA,SAASC,YAAT,QAA6B,sBAA7B;AACA,SAASC,mBAAT,QAAoC,qBAApC;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMC,WAAW,SAAXA,QAAW,GAAM;AAC5B,MAAI;AAAA,gCAC4BD,aAAaE,SAAb,CAAuB,EAACC,OAAOJ,mBAAR,EAAvB,CAD5B;AAAA,QACYK,WADZ,yBACKC,IADL,CACYD,WADZ;;AAEF,WAAOA,YAAYE,KAAZ,IAAqBC,aAAaC,OAAb,CAAqBV,YAArB,CAA5B;AACD,GAHD,CAGE,OAAOW,CAAP,EAAU;AACV,WAAOF,aAAaC,OAAb,CAAqBV,YAArB,CAAP;AACD;AACF,CAPM;AAQP;AACA,OAAO,IAAMY,UAAU,SAAVA,OAAU,GAAM;AAC3B,SAAO;AAAA,wEAAY,iBAAOC,OAAP,EAAgBC,MAAhB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEqBZ,aAAaG,KAAb,CAAmB,EAACA,OAAOJ,mBAAR,EAAnB,CAFrB;;AAAA;AAAA;AAEDK,yBAFC,SAERC,IAFQ,CAEDD,WAFC;;AAGf,kBAAIA,YAAYE,KAAhB,EAAuBK,QAAQ,IAAR,EAAvB,KACK;AACHA,wBAAQJ,aAAaC,OAAb,CAAqBV,YAArB,CAAR;AACA;AACA;AACA;AACA;AACD;AAVc;AAAA;;AAAA;AAAA;AAAA;;AAYfa,sBAAQ,KAAR;;AAZe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAZ;;AAAA;AAAA;AAAA;AAAA,MAAP;AAeD,CAhBM;AAiBP,OAAO,IAAME,kBAAkB,SAAlBA,eAAkB,CAACC,QAAD,EAAWC,SAAX,EAAyB;AACtD,MAAMC,UAAU,IAAIrB,SAAJ,EAAhB;AACAqB,UAAQC,YAAR,CAAqBF,SAArB;AACA,MAAMG,YAAYF,QAAQA,OAAR,CAAgBF,QAAhB,CAAlB;AACA,SAAOI,SAAP;AACD,CALM;AAMP,OAAO,IAAMC,uBAAuB,SAAvBA,oBAAuB,CAACC,MAAD,EAAY;AAC9C,MAAMC,UAAUzB,MAAM0B,MAAN,CAAaF,OAAOG,MAApB,EAA4B,QAA5B,CAAhB;AACA,SAAOC,IAAIC,eAAJ,CAAoB,IAAIC,IAAJ,CAAS,CAACL,OAAD,CAAT,CAApB,CAAP;AACD,CAHM;AAIP,OAAO,IAAMM,aAAa,SAAbA,UAAa,CAACC,IAAD,EAAU;AAClC,MAAI,EAAEA,gBAAgBC,IAAlB,CAAJ,EAA6B,MAAM,IAAIC,KAAJ,CAAU,aAAV,CAAN;AAC7B,MAAMC,OAAOH,KAAKI,QAAL,EAAb;AACA,MAAIC,MAAM,EAAV;AACA,MAAIF,QAAQ,CAAR,IAAaA,OAAO,CAAxB,EAA2BE,MAAM,IAAN,CAA3B,KACK,IAAIF,QAAQ,CAAR,IAAaA,OAAO,CAAxB,EAA2BE,MAAM,IAAN,CAA3B,KACA,IAAIF,QAAQ,CAAR,IAAaA,OAAO,EAAxB,EAA4BE,MAAM,IAAN,CAA5B,KACA,IAAIF,QAAQ,EAAR,IAAcA,OAAO,EAAzB,EAA6BE,MAAM,IAAN,CAA7B,KACA,IAAIF,QAAQ,EAAR,IAAcA,OAAO,EAAzB,EAA6BE,MAAM,IAAN,CAA7B,KACA,IAAIF,QAAQ,EAAR,IAAcA,OAAO,EAAzB,EAA6BE,MAAM,IAAN,CAA7B,KACAA,MAAM,IAAN;AACL,SAAOpC,WAAW+B,IAAX,kCAAgCK,GAAhC,WAAP;AACD,CAZM","file":"utils.js","sourcesContent":["import JSEncrypt from 'jsencrypt'\nimport iconv from 'iconv-lite'\nimport { dateFormat } from 'vux'\nimport { G_AUTH_TOKEN } from './constants/settings'\nimport { GetAuthPayloadQuery } from './store/AuthPayload'\nimport apolloClient from './ApolloClient'\n// import { GetLogedUserQuery } from './constants/graphql-queries'\n\n// 如果用是否存在token作为标准判断用户是否已登录，由于刷新页面Apollo缓存会消失，存储在AuthPayload里的token会消失，直接返回AuthPayload里的token会导致\n// 需要重新登录，如果返回记录在localStorage里的token,由于localStorage没有过期时间，而服务器端则规定了token的有效期，在token过期以后使用localStorage\n// 里的token会导致jwt expired的错误。所以除非使用Cookie代替localStorage，而Cookie和localStorage浏览器不是完全支持的\n// 如果专门写一个isLoged的方法，通过GetLogedUserQuery去请求服务器端用户的登录状态又会导致一次不必要的请求（用户在登录页面已经登录过了，在跳转到具体页面\n// 时又会被路由钩子函数拦截，再次判断登录状态）\nexport const getToken = () => {\n  try {\n    const {data: {authPayload}} = apolloClient.readQuery({query: GetAuthPayloadQuery})\n    return authPayload.token || localStorage.getItem(G_AUTH_TOKEN)\n  } catch (e) {\n    return localStorage.getItem(G_AUTH_TOKEN)\n  }\n}\n// 如果Apollo缓存中的token已经存在，说明用户已登录，直接返回true，否则再判断localStorage中记录的token是否已过期\nexport const isLoged = () => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const {data: {authPayload}} = await apolloClient.query({query: GetAuthPayloadQuery})\n      if (authPayload.token) resolve(true)\n      else {\n        resolve(localStorage.getItem(G_AUTH_TOKEN))\n        // const {data: {logedUser}} = await apolloClient.query({\n        //   query: GetLogedUserQuery\n        // })\n        // resolve(logedUser.loged)\n      }\n    } catch (e) {\n      resolve(false)\n    }\n  })\n}\nexport const encryptPassword = (password, publicKey) => {\n  const encrypt = new JSEncrypt()\n  encrypt.setPublicKey(publicKey)\n  const encrypted = encrypt.encrypt(password)\n  return encrypted\n}\nexport const transformUploadToURL = (upload) => {\n  const content = iconv.encode(upload.stream, 'base64')\n  return URL.createObjectURL(new Blob([content]))\n}\nexport const formatDate = (date) => {\n  if (!(date instanceof Date)) throw new Error('date必须是日期格式')\n  const hour = date.getHours()\n  let str = ''\n  if (hour >= 2 && hour < 5) str = '凌晨'\n  else if (hour >= 5 && hour < 8) str = '早晨'\n  else if (hour >= 8 && hour < 12) str = '上午'\n  else if (hour >= 12 && hour < 14) str = '中午'\n  else if (hour >= 14 && hour < 18) str = '下午'\n  else if (hour >= 18 && hour < 22) str = '晚上'\n  else str = '深夜'\n  return dateFormat(date, `YYYY年MM月DD日 ${str}HH:mm`)\n}\n"]}