{"version":3,"sources":["../../src/utils.js"],"names":["_regeneratorRuntime","_asyncToGenerator","_Promise","_this","JSEncrypt","iconv","GetAuthPayloadQuery","apolloClient","GetLogedUserQuery","isLoged","_ref","mark","_callee","resolve","reject","_ref2","authPayload","_ref3","logedUser","wrap","_callee$","_context","prev","next","query","sent","data","token","loged","t0","stop","_x","_x2","apply","arguments","encryptPassword","password","publicKey","encrypt","setPublicKey","encrypted","transformUploadToURL","upload","content","encode","stream","URL","createObjectURL","Blob"],"mappings":"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","file":"utils.js","sourcesContent":["import _regeneratorRuntime from 'babel-runtime/regenerator';\nimport _asyncToGenerator from 'babel-runtime/helpers/asyncToGenerator';\nimport _Promise from 'babel-runtime/core-js/promise';\n\nvar _this = this;\n\nimport JSEncrypt from 'jsencrypt';\nimport iconv from 'iconv-lite';\n// import { G_AUTH_TOKEN } from './constants/settings'\nimport { GetAuthPayloadQuery } from './store/AuthPayload';\nimport apolloClient from './ApolloClient';\nimport { GetLogedUserQuery } from './constants/graphql-queries';\n\n// 如果用是否存在token作为标准判断用户是否已登录，由于刷新页面Apollo缓存会消失，存储在AuthPayload里的token会消失，直接返回AuthPayload里的token会导致\n// 需要重新登录，如果返回记录在localStorage里的token,由于localStorage没有过期时间，而服务器端则规定了token的有效期，在token过期以后使用localStorage\n// 里的token会导致jwt expired的错误。所以除非使用Cookie代替localStorage，而Cookie和localStorage浏览器不是完全支持的\n// 如果专门写一个isLoged的方法，通过GetLogedUserQuery去请求服务器端用户的登录状态又会导致一次不必要的请求（用户在登录页面已经登录过了，在跳转到具体页面\n// 时又会被路由钩子函数拦截，再次判断登录状态）\n// export const getToken = () => {\n//   try {\n//     const {data: {authPayload}} = apolloClient.readQuery({query: GetAuthPayloadQuery})\n//     return authPayload.token || localStorage.getItem(G_AUTH_TOKEN)\n//   } catch (e) {\n//     return localStorage.getItem(G_AUTH_TOKEN) || null\n//   }\n// }\n// 如果Apollo缓存中的token已经存在，说明用户已登录，直接返回true，否则再判断localStorage中记录的token是否已过期\nexport var isLoged = function isLoged() {\n  return new _Promise(function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(resolve, reject) {\n      var _ref2, authPayload, _ref3, logedUser;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return apolloClient.query({ query: GetAuthPayloadQuery });\n\n            case 3:\n              _ref2 = _context.sent;\n              authPayload = _ref2.data.authPayload;\n\n              if (!authPayload.token) {\n                _context.next = 9;\n                break;\n              }\n\n              resolve(true);\n              _context.next = 14;\n              break;\n\n            case 9:\n              _context.next = 11;\n              return apolloClient.query({\n                query: GetLogedUserQuery\n              });\n\n            case 11:\n              _ref3 = _context.sent;\n              logedUser = _ref3.data.logedUser;\n\n              resolve(logedUser.loged);\n\n            case 14:\n              _context.next = 19;\n              break;\n\n            case 16:\n              _context.prev = 16;\n              _context.t0 = _context['catch'](0);\n\n              resolve(false);\n\n            case 19:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, _this, [[0, 16]]);\n    }));\n\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n};\nexport var encryptPassword = function encryptPassword(password, publicKey) {\n  var encrypt = new JSEncrypt();\n  encrypt.setPublicKey(publicKey);\n  var encrypted = encrypt.encrypt(password);\n  return encrypted;\n};\nexport var transformUploadToURL = function transformUploadToURL(upload) {\n  var content = iconv.encode(upload.stream, 'base64');\n  return URL.createObjectURL(new Blob([content]));\n};\n//# sourceMappingURL=utils.js.map"]}